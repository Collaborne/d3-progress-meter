{"version":3,"sources":["../src/index.js"],"names":["moment","require","businessAddWithBlocked","startMoment","daysToAdd","blockedPeriods","taskEnd","businessAdd","Math","round","_d","blockPeriod","find","isSame","block","start","isAfter","nrBlockDays","calcEnd","timeAllocation","nrNormDays","isValidDate","date","timestamp","Date","parse","isNaN","sumNrNormDays","tasks","reduce","acc","task","calcDeadlines","lastTaskNormDays","map","realDays","taskDeadline","deadline","format","id","schedule","params","Error","end","Boolean","startDate","period","businessDiff","endDate","nrRealDays","deadlines","deadlineById","Object","assign","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable max-statements*/\n\nconst moment = require('moment-business-days');\n\nfunction businessAddWithBlocked(startMoment, daysToAdd, blockedPeriods) {\n\t// Function businessAdd() fails on non-integers\n\t// NB. Round up to express the next available business day\n\tconst taskEnd = moment(startMoment.businessAdd(Math.round(daysToAdd))._d);\n\n\t// Check if task ends within one of the blocked periods provided\n\tconst blockPeriod = blockedPeriods.find(block => taskEnd.isSame(block.start) || taskEnd.isAfter(block.start));\n\tif (blockPeriod) {\n\t\t// Move the deadline by the number of blocked days\n\t\t// NB. Add one to round up to the next available business day\n\t\treturn moment(taskEnd.businessAdd(blockPeriod.nrBlockDays + 1)._d);\n\t}\n\n\treturn taskEnd;\n}\n\n/**\n * Calculates the end date for the scheduled task.\n *\n * @param {Moment} start - The starting date in date string format.\n * @param {number} timeAllocation - The time allocation percentage.\n * @param {number} nrNormDays - Number of normalized days required to complete all tasks.\n * @param {BlockedPeriod[]} blockedPeriods - Array of blocked periods.\n * @return {Object} the end date in date string format.\n */\nfunction calcEnd(start, timeAllocation, nrNormDays, blockedPeriods) {\n\tconst daysToAdd = nrNormDays / timeAllocation;\n\treturn businessAddWithBlocked(start, daysToAdd, blockedPeriods);\n}\n\n/**\n * Checks if a provided string is a valid date\n *\n * @param {string} date - The date to parse.\n * @return {boolean} true if the input date is valid\n */\nfunction isValidDate(date) {\n\tconst timestamp = Date.parse(date);\n\treturn !isNaN(timestamp);\n}\n\nfunction sumNrNormDays(tasks) {\n\treturn tasks.reduce((acc, task) => acc + task.nrNormDays, 0);\n}\n\nfunction calcDeadlines(tasks, start, blockedPeriods, timeAllocation) {\n\tconst startMoment = moment(start);\n\tlet lastTaskNormDays = 0;\n\treturn tasks.map(task => {\n\t\tlastTaskNormDays += task.nrNormDays;\n\t\tconst realDays = lastTaskNormDays / timeAllocation;\n\t\tconst taskDeadline = businessAddWithBlocked(startMoment, realDays, blockedPeriods);\n\t\treturn {\n\t\t\tdeadline: taskDeadline.format('YYYY-MM-DD'),\n\t\t\tid: task.id,\n\t\t};\n\t});\n}\n\n/**\n * Task to be scheduled.\n *\n * @typedef Task\n * @property {string} id ID of the task\n * @property {number} nrNormDays Number of normalized days required to complete the task (assuming 100% time allocation).\n */\n\n/**\n * Closed interval of time not available for tasks scheduling.\n * Eg. blocked period ['2018-03-07', '2018-03-08'] shifts scheduling of 2 days\n *\n * @typedef BlockedPeriod\n * @property {string} start String representing the start date of the period in ISO format (eg. '2018-03-19').\n * @property {string} end String representing the end date of the period in ISO format (eg. '2018-03-19').\n */\n\n/**\n * The computed scheduling.\n *\n * @typedef SchedulingResult\n * @property {Object[]} deadlines List of deadline objects\n * @property {string} start String representing the start date in ISO format (eg. '2018-03-19').\n * @property {string} end String representing the end date in ISO format (eg. '2018-03-19').\n * @property {number} nrNormDays Number of normalized days required to complete all tasks (e.g. if time allocation would be 100%)\n * @property {number} timeAllocation The time allocation in percentage (0..1)\n * @property {number} nrRealDays Number of business days required to complete all tasks (considering time allocation.\n */\n\n/**\n * Calculates the scheduling of a set of tasks.\n *\n * @param {Object} params - Input parameters for scheduling calculation.\n * @param {Task[]} params.tasks - An array of tasks.\n * @param {string} params.start - A string representing the starting date in ISO format (eg. '2018-03-19').\n * @param {string} [params.end] - A string representing the end date in ISO format (eg. '2018-03-19').\n * @param {number} [params.timeAllocation] - The time allocation percentage.\n * @param {BlockedPeriod[]} [params.blockedPeriods] - Array of blocked periods.\n * @return {SchedulingResult} an object describing the planning calculated\n */\nfunction schedule(params) {\n\t// Input validation\n\tif (!isValidDate(params.start)) {\n\t\tthrow new Error(`Invalid start date (${params.start}). Must be in format YYYY-MM-DD.`);\n\t}\n\tif (params.end && !isValidDate(params.end)) {\n\t\tthrow new Error(`Invalid end date (${params.end}). Must be in format YYYY-MM-DD.`);\n\t}\n\tif (Boolean(params.end) && Boolean(params.timeAllocation)) {\n\t\tthrow new Error('Only provide end date or time allocation percentage');\n\t}\n\n\tconst startDate = moment(params.start);\n\n\tconst nrNormDays = sumNrNormDays(params.tasks);\n\n\tconst blockedPeriods = (params.blockedPeriods || []).map(period => ({\n\t\tnrBlockDays: moment(period.start).businessDiff(moment(period.end)),\n\t\tstart: period.start,\n\t}));\n\n\tlet endDate;\n\tif (params.end) {\n\t\t// End date is given -> calculate time allocation\n\t\tendDate = moment(params.end);\n\t} else {\n\t\t// Time allocation is given -> calculate end date\n\t\tendDate = calcEnd(startDate, params.timeAllocation, nrNormDays, blockedPeriods);\n\t}\n\n\tconst nrRealDays = startDate.businessDiff(moment(endDate));\n\n\tlet timeAllocation;\n\tif (params.end) {\n\t\t// End date is given -> calculate time allocation\n\t\ttimeAllocation = nrNormDays / nrRealDays;\n\t} else {\n\t\ttimeAllocation = params.timeAllocation;\n\t}\n\n\tconst deadlines = calcDeadlines(params.tasks, startDate, blockedPeriods, timeAllocation);\n\tconst deadlineById = deadlines.reduce((acc, task) => Object.assign(acc, {\n\t\t[task.id]: task.deadline,\n\t}), {});\n\n\treturn {\n\t\tdeadlines: deadlineById,\n\t\tend: endDate.format('YYYY-MM-DD'),\n\t\tnrNormDays,\n\t\tnrRealDays,\n\t\tstart: startDate.format('YYYY-MM-DD'),\n\t\ttimeAllocation,\n\t};\n}\n\nmodule.exports = {\n\tschedule\n};\n"]}